version: '3.8'

services:
  scaleslayer.web.server:
    image: scaleslayer.web.server
    build:
      context: .
      dockerfile: ScaleSlayer.Web/ScaleSlayer.Web.Server/Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`enjoeneer.dev`) && PathPrefix(`/scale-slayer-api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    networks:
      - traefik-network

    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=scaleslayer;Username=postgres;Password=postgres
      - DatabaseConnectionString=Host=postgres;Port=5432;Username=postgres;Password=postgres;Database=scale-slayer
    depends_on:
      - postgres
      
  frontend:
    build:
      context: ./UI
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`enjoeneer.dev`) && PathPrefix(`/scale-slayer`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    networks:
      - traefik-network

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: scaleslayer
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - traefik-network

volumes:
  postgres-data:
    
networks:
  traefik-network:
    external: true
  app-network:
    driver: bridge
