// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScaleSlayer.Infrastructure.Persistence;

#nullable disable

namespace LoopLearner.Web.Server.Migrations
{
    [DbContext(typeof(ScaleSlayerDbContext))]
    partial class LoopLearnerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScaleSlayer.Application.Domain.Common.Entities.FretNote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NotePositionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotePositionId")
                        .IsUnique();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("ScaleSlayer.Application.Domain.SongAggregate.ValueObjects.NotePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("FretNumber")
                        .HasColumnType("integer");

                    b.Property<int>("StringNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("NotePositions");
                });

            modelBuilder.Entity("ScaleSlayer.Application.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f93d830-453e-4aff-a3a4-6a03c0994411"),
                            Email = "lincoln.abraham@example.com",
                            FirstName = "Abraham",
                            LastName = "Lincoln",
                            Password = "AQAAAAIAAYagAAAAEG4mH1JJ7AJe0nwL3xfWuW1TccBqmmCw3xZP4JSji9NgvkToOhWe8RzY/ZU8uTBvXg==",
                            UserName = "alincoln"
                        },
                        new
                        {
                            Id = new Guid("25d92b19-f51c-4f09-a78f-036f02395fc8"),
                            Email = "caesar.julius@example.com",
                            FirstName = "Julius",
                            LastName = "Caesar",
                            Password = "AQAAAAIAAYagAAAAEKJgupoJGMMatoynpPdGbshL7vTBThvczp8V/cZHCp3mU0bC2KVz1M968FOA6ZJBfw==",
                            UserName = "jcaesar"
                        },
                        new
                        {
                            Id = new Guid("e17811f8-41d1-4281-9e4f-ac2c40c958ca"),
                            Email = "einstein.albert@example.com",
                            FirstName = "Albert",
                            LastName = "Einstein",
                            Password = "AQAAAAIAAYagAAAAED2tcMJTM8bLXzyWnTrc2Pff4/vXg2e3ZzIciVlkunf4HdKzsKalK8jMNm1pem8mrA==",
                            UserName = "aeinstein"
                        },
                        new
                        {
                            Id = new Guid("afa2059e-8def-4120-9baa-1085be6cee9c"),
                            Email = "curie.marie@example.com",
                            FirstName = "Marie",
                            LastName = "Curie",
                            Password = "AQAAAAIAAYagAAAAEFhHKbXuU54g2yjlTN6qm2fkAQNovJsvzECYuAHI/IXw690Nf/zydpyB0v5dO5vpwQ==",
                            UserName = "mcurie"
                        },
                        new
                        {
                            Id = new Guid("ed629e7f-1823-42d6-a0bc-6b55b4b82b92"),
                            Email = "davinci.leonardo@example.com",
                            FirstName = "Leonardo",
                            LastName = "da Vinci",
                            Password = "AQAAAAIAAYagAAAAEEfbb66IcNwzXyOwJJUn+RnOdH9q5kzn8zgtfA1YQzQAWbTZYLXNWI2I5cVfmr0OVg==",
                            UserName = "ldavinci"
                        },
                        new
                        {
                            Id = new Guid("f7353959-5015-4550-af4d-d6a4c8cbbedc"),
                            Email = "shakespeare.william@example.com",
                            FirstName = "William",
                            LastName = "Shakespeare",
                            Password = "AQAAAAIAAYagAAAAEP4wtqSjG+JLDqVrow7zK2hnULJjJTTwY20YQswjZe88C0YZ8z0cfhePjZ7rs1xhqw==",
                            UserName = "wshakespeare"
                        },
                        new
                        {
                            Id = new Guid("ccd3ed8e-9570-451a-8d66-8f7847b6ac6b"),
                            Email = "cleopatra@example.com",
                            FirstName = "Cleopatra",
                            LastName = "",
                            Password = "AQAAAAIAAYagAAAAEGQrRpRDTu5PMGGqeU2yLPPHVPWPK/AWuNYt0V00bZUTtd8egabuBKFt14nZUO+5OA==",
                            UserName = "ccleopatra"
                        },
                        new
                        {
                            Id = new Guid("6147dc08-e9ad-493a-9be8-e885b1ea38fa"),
                            Email = "alexander@example.com",
                            FirstName = "Alexander",
                            LastName = "the Great",
                            Password = "AQAAAAIAAYagAAAAELGHfW2qdO8NFkafk2aXxfxpDhAoQB+zDnvTd+NMiW01KZL/BhBnGblnd7GKeOdZCw==",
                            UserName = "aalexander"
                        },
                        new
                        {
                            Id = new Guid("d44b380d-a422-4107-aa26-c51c38b2b53c"),
                            Email = "tesla.nikola@example.com",
                            FirstName = "Nikola",
                            LastName = "Tesla",
                            Password = "AQAAAAIAAYagAAAAEEUo265GbF7OA64gLuSbnAmwV+eIiRaSab/AC0cXksbD0whMYl2iDH12MUgPsKYfMg==",
                            UserName = "ntesla"
                        },
                        new
                        {
                            Id = new Guid("7ae53c4c-acd0-4256-b226-323edf0663f1"),
                            Email = "genghis.khan@example.com",
                            FirstName = "Genghis",
                            LastName = "Khan",
                            Password = "AQAAAAIAAYagAAAAEFt8kUwI4WslQd8LkTWroPigT5LhuN9eJEZo6VGe7NZUClg+/Ec9BfZ4vfPKaxcPdw==",
                            UserName = "wgenghis"
                        });
                });

            modelBuilder.Entity("ScaleSlayer.Application.Domain.Common.Entities.FretNote", b =>
                {
                    b.HasOne("ScaleSlayer.Application.Domain.SongAggregate.ValueObjects.NotePosition", "NotePosition")
                        .WithOne()
                        .HasForeignKey("ScaleSlayer.Application.Domain.Common.Entities.FretNote", "NotePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotePosition");
                });
#pragma warning restore 612, 618
        }
    }
}
