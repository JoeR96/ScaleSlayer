// <auto-generated />
using System;
using LoopLearner.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoopLearner.Web.Server.Migrations
{
    [DbContext(typeof(LoopLearnerDbContext))]
    [Migration("20241006174148_update-note")]
    partial class updatenote
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ChordNote", b =>
                {
                    b.Property<Guid>("ChordId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChordId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("ChordNote");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Chord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChordExtension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChordType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RootNote")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TabId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.ToTable("Chords");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.FretNote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NotePositionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TabId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NotePositionId")
                        .IsUnique();

                    b.HasIndex("TabId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("InstrumentParts");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Tab", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstrumentPartId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentPartId");

                    b.ToTable("Tab");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("BPM")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.ValueObjects.NotePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("FretNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StringNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("NotePositions");
                });

            modelBuilder.Entity("LoopLearner.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdbf762b-5d6b-4e1e-8a46-c95857927838"),
                            Email = "lincoln.abraham@example.com",
                            FirstName = "Abraham",
                            LastName = "Lincoln",
                            Password = "AQAAAAIAAYagAAAAECQzvtNEq0MDwof5HWHGKacXW0Dv+vqAHPFUBDqsmMDtFhyhvCSbIFYoHDzQrWk+Lw==",
                            UserName = "alincoln"
                        },
                        new
                        {
                            Id = new Guid("60d3a9f7-d927-4662-b79d-6cfee3199690"),
                            Email = "caesar.julius@example.com",
                            FirstName = "Julius",
                            LastName = "Caesar",
                            Password = "AQAAAAIAAYagAAAAEKNsYMMRBiW6kXnqC1myGoXHHpz42QOntH2KPJhTYYjsEsDQCtPjphpUJLqV630dhQ==",
                            UserName = "jcaesar"
                        },
                        new
                        {
                            Id = new Guid("4a317b47-410c-4d9b-9155-5bcd606f4138"),
                            Email = "einstein.albert@example.com",
                            FirstName = "Albert",
                            LastName = "Einstein",
                            Password = "AQAAAAIAAYagAAAAEP5eIk4PlTqJ2GP3wYNCkVbImmogutMbIySka4DI88V5Dr8Hrik771EjM40/Rt4DDg==",
                            UserName = "aeinstein"
                        },
                        new
                        {
                            Id = new Guid("9dd17f36-4f05-4e4e-8dc4-7148f63868c9"),
                            Email = "curie.marie@example.com",
                            FirstName = "Marie",
                            LastName = "Curie",
                            Password = "AQAAAAIAAYagAAAAEK9syNbBXARNCgIqHe5wH7FRLLaDKRo6ROs6oy7/B6Qvw+GnM1vjNVKQIa1xAutZww==",
                            UserName = "mcurie"
                        },
                        new
                        {
                            Id = new Guid("fa4a4272-afeb-4ee6-911c-5a77ec8d9fd8"),
                            Email = "davinci.leonardo@example.com",
                            FirstName = "Leonardo",
                            LastName = "da Vinci",
                            Password = "AQAAAAIAAYagAAAAEHCtSkIpDONKvWznJ6cSYPIluw6Ay5sbUOucGHrPYxLuYWbfP5A4WHW3GfaA++eLPA==",
                            UserName = "ldavinci"
                        },
                        new
                        {
                            Id = new Guid("f133f2d3-2eb1-4e07-998c-fcfde273ed18"),
                            Email = "shakespeare.william@example.com",
                            FirstName = "William",
                            LastName = "Shakespeare",
                            Password = "AQAAAAIAAYagAAAAEJYavB1fBfA2Bg8nbuR11WnHVSPtYolsPGqAAi1w3kc/jPioGpNrY+W+bKUnBKgcew==",
                            UserName = "wshakespeare"
                        },
                        new
                        {
                            Id = new Guid("2ea77b24-787b-4ec5-8a7a-1233b7c6935d"),
                            Email = "cleopatra@example.com",
                            FirstName = "Cleopatra",
                            LastName = "",
                            Password = "AQAAAAIAAYagAAAAEBPxnfKoQ2YA4BXc3Enk7M8PuucBY0pTZ0AJPXwpU+PK+sz950hJfX7mjASW6wSxqQ==",
                            UserName = "ccleopatra"
                        },
                        new
                        {
                            Id = new Guid("dd341f8b-5b8b-4bd5-8aaa-1c8ef3d6f649"),
                            Email = "alexander@example.com",
                            FirstName = "Alexander",
                            LastName = "the Great",
                            Password = "AQAAAAIAAYagAAAAELJsT2IwGuS9fqzp03DmRm88Vk69O6iHO0GK613En98UzdVhOqzVomiACN8Zq9irrQ==",
                            UserName = "aalexander"
                        },
                        new
                        {
                            Id = new Guid("6acaed02-6819-4621-8cab-780e80251f13"),
                            Email = "tesla.nikola@example.com",
                            FirstName = "Nikola",
                            LastName = "Tesla",
                            Password = "AQAAAAIAAYagAAAAEFG1kqlPZcfc1VfklyUoA+9MjWlHMHUIH+3gD1MIbQ5/kqxl3Ft3gSZNOwJ4cyt5fA==",
                            UserName = "ntesla"
                        },
                        new
                        {
                            Id = new Guid("cd905263-fd06-4097-b6e7-8c5286d71722"),
                            Email = "genghis.khan@example.com",
                            FirstName = "Genghis",
                            LastName = "Khan",
                            Password = "AQAAAAIAAYagAAAAEBorg17HcHsdYzcbn8ZcFTHdjWzVMW5afI04DkkPXm3n0uEqZ/2SmqTvT/BaF2TdAA==",
                            UserName = "wgenghis"
                        });
                });

            modelBuilder.Entity("ChordNote", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.Chord", null)
                        .WithMany()
                        .HasForeignKey("ChordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.FretNote", null)
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Chord", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.Tab", null)
                        .WithMany("Chords")
                        .HasForeignKey("TabId");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.FretNote", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.ValueObjects.NotePosition", "Position")
                        .WithOne()
                        .HasForeignKey("LoopLearner.Domain.SongAggregate.Entities.FretNote", "NotePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.Tab", null)
                        .WithMany("Notes")
                        .HasForeignKey("TabId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Song", null)
                        .WithMany("InstrumentParts")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Tab", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", null)
                        .WithMany("Tabs")
                        .HasForeignKey("InstrumentPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Song", b =>
                {
                    b.HasOne("LoopLearner.Domain.UserAggregate.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("LoopLearner.Domain.UserAggregate.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", b =>
                {
                    b.Navigation("Tabs");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Tab", b =>
                {
                    b.Navigation("Chords");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Song", b =>
                {
                    b.Navigation("InstrumentParts");
                });
#pragma warning restore 612, 618
        }
    }
}
