// <auto-generated />
using System;
using LoopLearner.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoopLearner.Web.Server.Migrations
{
    [DbContext(typeof(LoopLearnerDbContext))]
    [Migration("20240907204052_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ChordNote", b =>
                {
                    b.Property<Guid>("ChordId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChordId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("ChordNote");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Chord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RootNote")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TabId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.ToTable("Chords");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("InstrumentParts");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NotePositionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TabId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NotePositionId")
                        .IsUnique();

                    b.HasIndex("TabId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Tab", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstrumentPartId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentPartId");

                    b.ToTable("Tab");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("BPM")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.ValueObjects.NotePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("FretNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StringNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("NotePositions");
                });

            modelBuilder.Entity("LoopLearner.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("700df619-b907-4473-8c39-c68606a27688"),
                            Email = "lincoln.abraham@example.com",
                            FirstName = "Abraham",
                            LastName = "Lincoln",
                            Password = "AQAAAAIAAYagAAAAEM2F6fKnc7N2Ge5orlv5KBqD+dorYvRmZ2XZNqU4rGLdqzvGI4PV3QpponEedVj1VA==",
                            UserName = "alincoln"
                        },
                        new
                        {
                            Id = new Guid("dd4bf13a-50ab-4a9b-b931-5d232e0bdb77"),
                            Email = "caesar.julius@example.com",
                            FirstName = "Julius",
                            LastName = "Caesar",
                            Password = "AQAAAAIAAYagAAAAEGjMBmI0euCu1+nMahnJ2YvsV5/Vp/pdsceElRsmPYn4pnzFfmXnl5EIAnzETGac2g==",
                            UserName = "jcaesar"
                        },
                        new
                        {
                            Id = new Guid("a16341a2-bcf3-4f1d-b083-d1b74d0eb281"),
                            Email = "einstein.albert@example.com",
                            FirstName = "Albert",
                            LastName = "Einstein",
                            Password = "AQAAAAIAAYagAAAAELRKJpPlWLe3XFiBOGGA0YluB4ZhFFiXllCoHhNZQQtr2WpAGWLgZMuPwiIMXAVdng==",
                            UserName = "aeinstein"
                        },
                        new
                        {
                            Id = new Guid("c882368a-7d59-4c49-8ffb-a515d3d43780"),
                            Email = "curie.marie@example.com",
                            FirstName = "Marie",
                            LastName = "Curie",
                            Password = "AQAAAAIAAYagAAAAELWD/i/uC62nMsby8zncrPcFqoyuh3U8NjyYgY2CigyG/b8XB70JnO/WYUztPDnr3Q==",
                            UserName = "mcurie"
                        },
                        new
                        {
                            Id = new Guid("03015f65-81f3-4459-84e3-0bc7317a9af2"),
                            Email = "davinci.leonardo@example.com",
                            FirstName = "Leonardo",
                            LastName = "da Vinci",
                            Password = "AQAAAAIAAYagAAAAEEzMse4yMlTpEO3b1nLo3ZPv4pi1A3AO2UhOKXsKhTpeFF+UrvtpTH61z5Al1MEQbQ==",
                            UserName = "ldavinci"
                        },
                        new
                        {
                            Id = new Guid("ab843922-d6b6-4a5d-a7f8-1190fec9c702"),
                            Email = "shakespeare.william@example.com",
                            FirstName = "William",
                            LastName = "Shakespeare",
                            Password = "AQAAAAIAAYagAAAAEEK8VvM/VDNjjgJlF/iyjTLfb9Qo5U0Bup8B/LKR0XtyWi3yJi3AaNsHU1dYSciERA==",
                            UserName = "wshakespeare"
                        },
                        new
                        {
                            Id = new Guid("ee50e2a3-7524-4cc9-abb8-14965fb35bb9"),
                            Email = "cleopatra@example.com",
                            FirstName = "Cleopatra",
                            LastName = "",
                            Password = "AQAAAAIAAYagAAAAEF4mn3gHuqYCm9UD0Flms1Nk6R3t5jjB1pkIqSpbPVGdJdMOVIIYzH2J2qpEsijksw==",
                            UserName = "ccleopatra"
                        },
                        new
                        {
                            Id = new Guid("cd694460-d9ba-4f99-888d-f7748f9a690f"),
                            Email = "alexander@example.com",
                            FirstName = "Alexander",
                            LastName = "the Great",
                            Password = "AQAAAAIAAYagAAAAEMie/CLh0MTOYbuFysOn8/n0oLhLN/Alg1hTKvXCvuwVG+VVlKoN/WD159dvLYPUzw==",
                            UserName = "aalexander"
                        },
                        new
                        {
                            Id = new Guid("29352334-6241-4959-93fa-96af9fb93e22"),
                            Email = "tesla.nikola@example.com",
                            FirstName = "Nikola",
                            LastName = "Tesla",
                            Password = "AQAAAAIAAYagAAAAEOKQVZdLfAvr/ot90jEg/3pp3DXFjzTXfrKV5FkSeAV/khBehrK0TWdA0tt9u6uZcw==",
                            UserName = "ntesla"
                        },
                        new
                        {
                            Id = new Guid("ef353976-8fdf-4cba-a70d-ca00c27226ce"),
                            Email = "genghis.khan@example.com",
                            FirstName = "Genghis",
                            LastName = "Khan",
                            Password = "AQAAAAIAAYagAAAAELWqwsm7mLI4BR/HM1XwJ1y07nxj4b/jCGMPHaVqrkGoBott1D9Dc2kXo1+ExhkfmA==",
                            UserName = "wgenghis"
                        });
                });

            modelBuilder.Entity("ChordNote", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.Chord", null)
                        .WithMany()
                        .HasForeignKey("ChordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.Note", null)
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Chord", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.Tab", null)
                        .WithMany("Chords")
                        .HasForeignKey("TabId");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Song", null)
                        .WithMany("InstrumentParts")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Note", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.ValueObjects.NotePosition", "Position")
                        .WithOne()
                        .HasForeignKey("LoopLearner.Domain.SongAggregate.Entities.Note", "NotePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.Tab", null)
                        .WithMany("Notes")
                        .HasForeignKey("TabId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Tab", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", null)
                        .WithMany("Tabs")
                        .HasForeignKey("InstrumentPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Song", b =>
                {
                    b.HasOne("LoopLearner.Domain.UserAggregate.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("LoopLearner.Domain.UserAggregate.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", b =>
                {
                    b.Navigation("Tabs");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Tab", b =>
                {
                    b.Navigation("Chords");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Song", b =>
                {
                    b.Navigation("InstrumentParts");
                });
#pragma warning restore 612, 618
        }
    }
}
