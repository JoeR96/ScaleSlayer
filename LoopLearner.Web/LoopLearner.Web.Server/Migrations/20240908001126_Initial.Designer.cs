// <auto-generated />
using System;
using LoopLearner.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoopLearner.Web.Server.Migrations
{
    [DbContext(typeof(LoopLearnerDbContext))]
    [Migration("20240908001126_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ChordNote", b =>
                {
                    b.Property<Guid>("ChordId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChordId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("ChordNote");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Chord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChordExtension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChordType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RootNote")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TabId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.ToTable("Chords");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("InstrumentParts");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NotePositionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TabId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NotePositionId")
                        .IsUnique();

                    b.HasIndex("TabId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Tab", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstrumentPartId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentPartId");

                    b.ToTable("Tab");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("BPM")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.ValueObjects.NotePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("FretNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StringNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("NotePositions");
                });

            modelBuilder.Entity("LoopLearner.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("79bab614-7901-4bb0-8c83-612985175bd7"),
                            Email = "lincoln.abraham@example.com",
                            FirstName = "Abraham",
                            LastName = "Lincoln",
                            Password = "AQAAAAIAAYagAAAAEEfW9z+/mabX822Xu9oLVe5pbh4fSQUvJi95ZPEyjWWaCbtLHLOFyw6dPILygQUI9w==",
                            UserName = "alincoln"
                        },
                        new
                        {
                            Id = new Guid("e912d3fe-602e-4d6d-9912-1a71818cc401"),
                            Email = "caesar.julius@example.com",
                            FirstName = "Julius",
                            LastName = "Caesar",
                            Password = "AQAAAAIAAYagAAAAENx2RXiFov8+B6xy4asTZ0ndXuoOsuxmAMLUb3wrq7Yhv0eNCm0JjzBpUdPtlUJxHg==",
                            UserName = "jcaesar"
                        },
                        new
                        {
                            Id = new Guid("e0ccbcce-77ab-43b0-9ce6-415a4ee9fe96"),
                            Email = "einstein.albert@example.com",
                            FirstName = "Albert",
                            LastName = "Einstein",
                            Password = "AQAAAAIAAYagAAAAEEXABvgGx6J/JHw1d/k31FFgZKyF4McA1YO6graSNN2mWSbp/42PkqVx/0BB7tL0VQ==",
                            UserName = "aeinstein"
                        },
                        new
                        {
                            Id = new Guid("32b86004-c72d-42b9-9037-0bc3ca3df34d"),
                            Email = "curie.marie@example.com",
                            FirstName = "Marie",
                            LastName = "Curie",
                            Password = "AQAAAAIAAYagAAAAEOF1DgPSj5J/z9yceOfXRHsH7/rf1i9mnIJl66feELVhz/JIMUbEHyaWMZKIRaFkdg==",
                            UserName = "mcurie"
                        },
                        new
                        {
                            Id = new Guid("164186cd-a55a-489f-990f-0f306a54e9bc"),
                            Email = "davinci.leonardo@example.com",
                            FirstName = "Leonardo",
                            LastName = "da Vinci",
                            Password = "AQAAAAIAAYagAAAAEGkCoFQWyy40sDUoXWUBdmJdjdpUIEACRlBEw2rS+oEeKIZ0JNoAzMc9okpT+j3oeg==",
                            UserName = "ldavinci"
                        },
                        new
                        {
                            Id = new Guid("59fec155-df3d-450a-b7b1-fed722a36e58"),
                            Email = "shakespeare.william@example.com",
                            FirstName = "William",
                            LastName = "Shakespeare",
                            Password = "AQAAAAIAAYagAAAAEFM3UboO36XEQCYexfK1L08dbn/5bl9cSPxN5QvO6PsP7ATydN++8AaHnLaw2JdWUA==",
                            UserName = "wshakespeare"
                        },
                        new
                        {
                            Id = new Guid("16ba4d12-8187-40b1-a366-42eea5399a06"),
                            Email = "cleopatra@example.com",
                            FirstName = "Cleopatra",
                            LastName = "",
                            Password = "AQAAAAIAAYagAAAAEB1kRcuT11E8k+ivEgTHC0wATctqOTzxTqYqwR7CnqddQgvIYkj8ZEsmHq39Xhe8DA==",
                            UserName = "ccleopatra"
                        },
                        new
                        {
                            Id = new Guid("03280f59-2df0-41b3-8d4d-115c84aea6c6"),
                            Email = "alexander@example.com",
                            FirstName = "Alexander",
                            LastName = "the Great",
                            Password = "AQAAAAIAAYagAAAAED1GbI9JFt6JFhkrHwaR/cXyJCrT3Fs07kMR7v8oeew2ej0jfidWF8/cN2MaW6YrnA==",
                            UserName = "aalexander"
                        },
                        new
                        {
                            Id = new Guid("2c84c8fb-1565-48f0-966b-f961f59b8cdb"),
                            Email = "tesla.nikola@example.com",
                            FirstName = "Nikola",
                            LastName = "Tesla",
                            Password = "AQAAAAIAAYagAAAAEOIl62jkF6sh2nnsTmYtTUQ03HqPvTVI7P+Jg1xM+kwEDLOXYrkUKDY0h0ANbroBAg==",
                            UserName = "ntesla"
                        },
                        new
                        {
                            Id = new Guid("7e94c2a8-8da4-4951-b709-b950486bfa3e"),
                            Email = "genghis.khan@example.com",
                            FirstName = "Genghis",
                            LastName = "Khan",
                            Password = "AQAAAAIAAYagAAAAEBOghTtNNea5lnOXAexhL40ZHFjCZAM94Fj60T7mBl4a3gEo3KX9G9I749fzqpEzTw==",
                            UserName = "wgenghis"
                        });
                });

            modelBuilder.Entity("ChordNote", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.Chord", null)
                        .WithMany()
                        .HasForeignKey("ChordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.Note", null)
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Chord", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.Tab", null)
                        .WithMany("Chords")
                        .HasForeignKey("TabId");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Song", null)
                        .WithMany("InstrumentParts")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Note", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.ValueObjects.NotePosition", "Position")
                        .WithOne()
                        .HasForeignKey("LoopLearner.Domain.SongAggregate.Entities.Note", "NotePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.Tab", null)
                        .WithMany("Notes")
                        .HasForeignKey("TabId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Tab", b =>
                {
                    b.HasOne("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", null)
                        .WithMany("Tabs")
                        .HasForeignKey("InstrumentPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Song", b =>
                {
                    b.HasOne("LoopLearner.Domain.UserAggregate.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("LoopLearner.Domain.UserAggregate.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.InstrumentPart", b =>
                {
                    b.Navigation("Tabs");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Entities.Tab", b =>
                {
                    b.Navigation("Chords");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("LoopLearner.Domain.SongAggregate.Song", b =>
                {
                    b.Navigation("InstrumentParts");
                });
#pragma warning restore 612, 618
        }
    }
}
